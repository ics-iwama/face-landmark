import*as a from"https://cdn.jsdelivr.net/npm/three@0.165.0/build/three.module.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))c(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&c(s)}).observe(document,{childList:!0,subtree:!0});function t(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function c(o){if(o.ep)return;o.ep=!0;const i=t(o);fetch(o.href,i)}})();let F=["hige","ribbon","rabbit","cat02","cat03","bear01"],v={},C=document.querySelectorAll(".button"),N=document.querySelectorAll(".position-controllerButton"),u="rabbit";const b=document.querySelector("#canvas"),m=document.querySelector("#video");let r,D,d,S,h=0,w=0,g,f,l;const L={hige:{scale:25,basePoint:164,xFix:-15,yFix:-10},rabbit:{scale:200,basePoint:1,xFix:-10,yFix:-30},ribbon:{scale:50,basePoint:0,xFix:-25,yFix:30},cat02:{scale:150,basePoint:1,xFix:-15,yFix:-20},cat03:{scale:150,basePoint:1,xFix:-20,yFix:0},bear01:{scale:150,basePoint:1,xFix:-25,yFix:0}};function O(){l=new a.WebGLRenderer({canvas:b,alpha:!0}),l.setPixelRatio(window.devicePixelRatio),l.setSize(window.innerWidth,window.innerHeight),l.setClearColor(0,0),g=new a.Scene;const n=45;f=new a.PerspectiveCamera(n,window.innerWidth/window.innerHeight,1,1e3),f.position.set(0,0,680),z()}function T(){C.forEach(n=>{n.addEventListener("click",e=>{h=0,w=0,u=e.target.dataset.deco||e.target.parentElement.dataset.deco,k()})}),N.forEach(n=>{n.addEventListener("click",e=>{const t=e.target.dataset.position||e.target.parentElement.dataset.position;t==="top"?w+=5:t==="bottom"?w-=5:t==="right"?h-=5:t==="left"&&(h+=5)})})}function I(){let n=0;F.forEach(e=>{const t=new Image;t.onload=()=>{v[e]=t.width/t.height,n++,n===F.length&&(O(),E())},t.src=`face-landmark/images/${e}.png`})}function z(){const n=L[u],e=v[u],t=new a.PlaneGeometry(e,1),o=new a.TextureLoader().load(`face-landmark/images/${u}.png`,function(s){s.colorSpace=a.SRGBColorSpace}),i=new a.MeshBasicMaterial({map:o,side:a.DoubleSide,transparent:!0});r=new a.Mesh(t,i),r.scale.set(n.scale,n.scale,0),g.add(r)}function k(){r&&(g.remove(r),r.geometry.dispose(),r.material.dispose(),r=null),z()}function A(){if(d&&d.length>0){const n=B();r.quaternion.copy(n);const e=L[u],t=q(d[0].keypoints),c=t[e.basePoint],o=new a.Vector3(c.x+h+e.xFix,c.y+w+e.yFix,c.z-300),i=t[1],s=t[127],p=t[356],H=s.x-p.x,W=s.y-p.y,y=Math.atan2(W,H),R=Math.sqrt(Math.pow(i.x-s.x,2)+Math.pow(i.y-s.y,2)),V=Math.sqrt(Math.pow(i.x-p.x,2)+Math.pow(i.y-p.y,2)),x=(R+V)/200;r.scale.set(e.scale*x,-e.scale*x,0);const P=e.scale*x;o.y+=P/2;const M=P/2*Math.sin(y);o.x+=M,o.y-=M*Math.sin(y),r.position.copy(o),r.rotation.z=y}}function E(){l.render(g,f),U(),A(),requestAnimationFrame(E)}function B(){if(d&&d.length>0){const n=q(d[0].keypoints),e=n[1],t=n[279],c=n[49],o={x:(t.x+c.x)/2,y:(t.y+c.y)/2,z:(t.z+c.z)/2},i={x:o.x,y:o.y-10,z:o.z};S=new a.Vector3(e.x,e.y,e.z).sub(new a.Vector3(i.x,i.y,i.z)).normalize();const s=new a.Quaternion;return s.setFromUnitVectors(new a.Vector3(0,0,1),S),s}}async function j(){const n=await navigator.mediaDevices.getUserMedia({audio:!1,video:{width:window.innerWidth,height:window.innerHeight}});return m.srcObject=n,new Promise(e=>{m.onloadedmetadata=()=>{e(m)}})}async function G(){const n=faceLandmarksDetection.SupportedModels.MediaPipeFaceMesh,e={runtime:"mediapipe",solutionPath:"https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh"};D=await faceLandmarksDetection.createDetector(n,e)}async function U(){const n={flipHorizontal:!1};d=await D.estimateFaces(m,n)}function q(n){return n.map(t=>({x:t.x-window.innerWidth/2,y:-t.y+window.innerHeight/2,z:(t.z/100*-1+1)*100}))}async function X(){T(),I(),await j(),await G(),b.width=window.innerWidth,b.height=window.innerHeight,f.aspect=window.innerWidth/window.innerHeight,f.updateProjectionMatrix(),l.setSize(window.innerWidth,window.innerHeight),E()}X();
